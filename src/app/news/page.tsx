
'use client';

import { useState, useEffect, Suspense } from 'react';
import { getNews, summarizeNewsArticle } from '@/app/actions';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Skeleton } from '@/components/ui/skeleton';
import Image from 'next/image';
import { Button } from '@/components/ui/button';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import { Loader2, BookOpen } from 'lucide-react';

type NewsItem = {
  uuid: string;
  title: string;
  publisher: string;
  link: string;
  providerPublishTime: string;
  thumbnail?: string;
};

const newsCategories = [
  { value: 'market-news', label: 'Market News' },
  { value: 'technology', label: 'Technology' },
  { value: 'finance', label: 'Finance' },
  { value: 'economy', label: 'Economy' },
  { value: 'crypto', label: 'Crypto' },
];

function NewsList({ category }: { category: string }) {
  const [news, setNews] = useState<NewsItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [summarizing, setSummarizing] = useState(false);
  const [summary, setSummary] = useState<{ summary: string, impact: string } | null>(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [currentUrl, setCurrentUrl] = useState<string | null>(null);


  useEffect(() => {
    const fetchNews = async () => {
      setLoading(true);
      const fetchedNews = await getNews(category.replace('-', ' '));
      setNews(fetchedNews);
      setLoading(false);
    };

    fetchNews();
  }, [category]);

  const handleSummarize = async (url: string) => {
    setCurrentUrl(url);
    setSummarizing(true);
    setSummary(null);
    setIsDialogOpen(true);
    const result = await summarizeNewsArticle(url);
    setSummary(result);
    setSummarizing(false);
  }

  if (loading) {
    return (
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
        {Array.from({ length: 12 }).map((_, i) => (
          <Card key={i}>
            <CardHeader>
              <Skeleton className="h-[150px] w-full rounded-md" />
            </CardHeader>
            <CardContent className="p-4 space-y-2">
              <Skeleton className="h-4 w-3/4" />
              <Skeleton className="h-4 w-1/2" />
              <Skeleton className="h-4 w-1/4" />
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  return (
    <>
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4">
        {news.map((item) => (
          <Card key={item.uuid} className="h-full overflow-hidden flex flex-col">
             <CardHeader className="p-0">
                <a href={item.link} target="_blank" rel="noopener noreferrer" className="block hover:opacity-80 transition-opacity">
                    {item.thumbnail ? (
                    <Image
                        src={item.thumbnail}
                        alt={item.title}
                        width={400}
                        height={225}
                        className="aspect-video w-full object-cover"
                        data-ai-hint="news article"
                        />
                    ) : (
                    <div className="aspect-video w-full bg-secondary flex items-center justify-center">
                        <BookOpen className="w-12 h-12 text-muted-foreground" />
                    </div>
                    )}
                </a>
              </CardHeader>
              <CardContent className="p-4 space-y-2 flex-grow">
                 <a href={item.link} target="_blank" rel="noopener noreferrer" className="block">
                    <p className="text-sm font-semibold leading-tight hover:underline">{item.title}</p>
                 </a>
                <p className="text-xs text-muted-foreground">{item.publisher} &bull; {item.providerPublishTime}</p>
              </CardContent>
            <div className="p-4 pt-0">
                <Button variant="secondary" className="w-full" onClick={() => handleSummarize(item.link)}>
                    {summarizing && currentUrl === item.link ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : null}
                    Summarize
                </Button>
            </div>
          </Card>
        ))}
      </div>
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogContent className="sm:max-w-xl">
              <DialogHeader>
                  <DialogTitle>AI News Summary</DialogTitle>
                  <DialogDescription>
                      This summary and analysis is generated by AI. It may not be fully accurate. Always verify key information.
                  </DialogDescription>
              </DialogHeader>
              {summarizing ? (
                  <div className="flex items-center justify-center p-8">
                      <Loader2 className="h-8 w-8 animate-spin text-primary" />
                      <p className="ml-4 text-muted-foreground">Reading article & summarizing...</p>
                  </div>
              ) : (
                  summary && (
                      <div className="space-y-4 text-sm max-h-[60vh] overflow-y-auto pr-4">
                          <div>
                              <h3 className="font-semibold mb-2 text-base">Summary</h3>
                              <p className="text-muted-foreground leading-relaxed">{summary.summary}</p>
                          </div>
                          <div>
                              <h3 className="font-semibold mb-2 text-base">Potential Market Impact</h3>
                              <p className="text-muted-foreground leading-relaxed">{summary.impact}</p>
                          </div>
                      </div>
                  )
              )}
          </DialogContent>
      </Dialog>
    </>
  );
}

export default function NewsPage() {
  const [activeTab, setActiveTab] = useState(newsCategories[0].value);

  return (
    <div className="flex-1 space-y-6 p-4 md:p-8 pt-6">
      <div className="max-w-8xl mx-auto">
        <h2 className="text-3xl font-bold tracking-tight mb-4">Financial News</h2>
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="mb-4">
            {newsCategories.map((cat) => (
              <TabsTrigger key={cat.value} value={cat.value}>
                {cat.label}
              </TabsTrigger>
            ))}
          </TabsList>
          
          <Suspense fallback={<p>Loading...</p>}>
            {newsCategories.map((cat) => (
              <TabsContent key={cat.value} value={cat.value}>
                <NewsList category={cat.value} />
              </TabsContent>
            ))}
          </Suspense>
        </Tabs>
      </div>
    </div>
  );
}
